// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	gophermarket "gophermarket/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceAuth is a mock of ServiceAuth interface.
type MockServiceAuth struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAuthMockRecorder
}

// MockServiceAuthMockRecorder is the mock recorder for MockServiceAuth.
type MockServiceAuthMockRecorder struct {
	mock *MockServiceAuth
}

// NewMockServiceAuth creates a new mock instance.
func NewMockServiceAuth(ctrl *gomock.Controller) *MockServiceAuth {
	mock := &MockServiceAuth{ctrl: ctrl}
	mock.recorder = &MockServiceAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAuth) EXPECT() *MockServiceAuthMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockServiceAuth) SignIn(ctx context.Context, user gophermarket.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockServiceAuthMockRecorder) SignIn(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockServiceAuth)(nil).SignIn), ctx, user)
}

// SignUp mocks base method.
func (m *MockServiceAuth) SignUp(ctx context.Context, user gophermarket.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceAuthMockRecorder) SignUp(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockServiceAuth)(nil).SignUp), ctx, user)
}

// ValidateAuth mocks base method.
func (m *MockServiceAuth) ValidateAuth(user gophermarket.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAuth", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAuth indicates an expected call of ValidateAuth.
func (mr *MockServiceAuthMockRecorder) ValidateAuth(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAuth", reflect.TypeOf((*MockServiceAuth)(nil).ValidateAuth), user)
}
