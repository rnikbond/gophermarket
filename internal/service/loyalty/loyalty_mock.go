// Code generated by MockGen. DO NOT EDIT.
// Source: loyalty.go

// Package loyalty is a generated GoMock package.
package loyalty

import (
	context "context"
	gophermarket "gophermarket/internal"
	pkg "gophermarket/pkg"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceLoyalty is a mock of ServiceLoyalty interface.
type MockServiceLoyalty struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLoyaltyMockRecorder
}

// MockServiceLoyaltyMockRecorder is the mock recorder for MockServiceLoyalty.
type MockServiceLoyaltyMockRecorder struct {
	mock *MockServiceLoyalty
}

// NewMockServiceLoyalty creates a new mock instance.
func NewMockServiceLoyalty(ctrl *gomock.Controller) *MockServiceLoyalty {
	mock := &MockServiceLoyalty{ctrl: ctrl}
	mock.recorder = &MockServiceLoyaltyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLoyalty) EXPECT() *MockServiceLoyaltyMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockServiceLoyalty) Balance(ctx context.Context, username string) (gophermarket.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", ctx, username)
	ret0, _ := ret[0].(gophermarket.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockServiceLoyaltyMockRecorder) Balance(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockServiceLoyalty)(nil).Balance), ctx, username)
}

// HowMatchAvailable mocks base method.
func (m *MockServiceLoyalty) HowMatchAvailable(ctx context.Context, username string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HowMatchAvailable", ctx, username)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HowMatchAvailable indicates an expected call of HowMatchAvailable.
func (mr *MockServiceLoyaltyMockRecorder) HowMatchAvailable(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HowMatchAvailable", reflect.TypeOf((*MockServiceLoyalty)(nil).HowMatchAvailable), ctx, username)
}

// HowMatchUsed mocks base method.
func (m *MockServiceLoyalty) HowMatchUsed(ctx context.Context, username string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HowMatchUsed", ctx, username)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HowMatchUsed indicates an expected call of HowMatchUsed.
func (mr *MockServiceLoyaltyMockRecorder) HowMatchUsed(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HowMatchUsed", reflect.TypeOf((*MockServiceLoyalty)(nil).HowMatchUsed), ctx, username)
}

// Payments mocks base method.
func (m *MockServiceLoyalty) Payments(ctx context.Context, username string) ([]pkg.PaymentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payments", ctx, username)
	ret0, _ := ret[0].([]pkg.PaymentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payments indicates an expected call of Payments.
func (mr *MockServiceLoyaltyMockRecorder) Payments(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payments", reflect.TypeOf((*MockServiceLoyalty)(nil).Payments), ctx, username)
}

// SetAccrual mocks base method.
func (m *MockServiceLoyalty) SetAccrual(ctx context.Context, order int64, accrual float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccrual", ctx, order, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccrual indicates an expected call of SetAccrual.
func (mr *MockServiceLoyaltyMockRecorder) SetAccrual(ctx, order, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccrual", reflect.TypeOf((*MockServiceLoyalty)(nil).SetAccrual), ctx, order, accrual)
}
